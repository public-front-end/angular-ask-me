// https://github.com/angular-eslint/angular-eslint#notes-for-eslint-plugin-prettier-users
{
	"root": true,
	"ignorePatterns": ["projects/**/*"],
	"overrides": [
		{
			"files": ["*.ts"],
			"parserOptions": {
				"project": ["tsconfig.json", "e2e/tsconfig.json"],
				"createDefaultProgram": true
			},
			"extends": [
				"plugin:@angular-eslint/recommended",
				"plugin:@angular-eslint/template/process-inline-templates",
				"plugin:prettier/recommended"
			],
			"rules": {
				"semi": [
					"error",
					"never",
					{ "beforeStatementContinuationChars": "always" }
				],
				"max-len": [
					"error",
					{
						"code": 100,
						"comments": 240,
						"ignorePattern": "import(.*).then(.*)"
					}
				],
				"max-lines-per-function": [
					"error",
					{
						"max": 20,
						"skipComments": true
					}
				],
				"spaced-comment": ["error", "always"],
				"space-before-blocks": "error",
				"keyword-spacing": "error",
				"no-useless-return": "error",
				"no-useless-concat": "error",
				"no-useless-call": "error",
				"no-unmodified-loop-condition": "error",
				"no-throw-literal": "error",
				"no-self-assign": "error",
				"no-self-compare": "error",
				"no-redeclare": "error",
				"no-proto": "error",
				"no-octal": "error",
				"no-param-reassign": "error",
				"no-new-wrappers": "error",
				"no-new-func": "error",
				"no-new": "error",
				"no-multi-str": "error",
				"no-implied-eval": "error",
				"no-global-assign": "error",
				"no-floating-decimal": "error",
				"no-extra-label": "error",
				"no-extend-native": "error",
				"no-eval": "error",
				"no-var": "error",
				"no-lone-blocks": "error",
				"prefer-const": "error",
				"eol-last": ["error", "always"],
				"lines-between-class-members": "off",
				"no-empty": ["error", { "allowEmptyCatch": true }],
				"no-empty-pattern": "error",
				"no-else-return": ["error"],
				"no-constructor-return": "error",
				"no-multiple-empty-lines": [
					"error",
					{
						"max": 1,
						"maxEOF": 1
					}
				],
				"no-empty-function": [
					"error",
					{
						"allow": ["constructors"]
					}
				],
				"max-lines": [
					"error",
					{
						"max": 400,
						"skipComments": true
					}
				],
				"@angular-eslint/component-class-suffix": [
					"error",
					{
						"suffixes": ["Page", "Component"]
					}
				],
				"@angular-eslint/component-selector": [
					"error",
					{
						"type": "element",
						"prefix": "app",
						"style": "kebab-case"
					}
				],
				"@angular-eslint/directive-selector": [
					"error",
					{
						"type": "attribute",
						"prefix": "app",
						"style": "camelCase"
					}
				],
				"@typescript-eslint/explicit-member-accessibility": [
					"error",
					{
						"overrides": {
							"constructors": "no-public"
						}
					}
				],
				"@typescript-eslint/ban-types": "off",
				"@typescript-eslint/lines-between-class-members": [
					"error",
					"always",
					{
						"exceptAfterSingleLine": true
					}
				],
				"@typescript-eslint/member-ordering": [
					"error",
					{
						"default": [
							// Index signature
							"signature",
							"call-signature",

							// Fields
							"public-static-field",
							"protected-static-field",
							"private-static-field",
							"#private-static-field",

							"public-decorated-field",
							"protected-decorated-field",
							"private-decorated-field",

							"public-instance-field",
							"protected-instance-field",
							"private-instance-field",
							"#private-instance-field",

							"public-abstract-field",
							"protected-abstract-field",

							"public-field",
							"protected-field",
							"private-field",
							"#private-field",

							"static-field",
							"instance-field",
							"abstract-field",

							"decorated-field",

							"field",

							// Static initialization
							"static-initialization",

							// Constructors
							"public-constructor",
							"protected-constructor",
							"private-constructor",

							"constructor",

							// Getters
							"public-static-get",
							"protected-static-get",
							"private-static-get",
							"#private-static-get",

							"public-decorated-get",
							"protected-decorated-get",
							"private-decorated-get",

							"public-instance-get",
							"protected-instance-get",
							"private-instance-get",
							"#private-instance-get",

							"public-abstract-get",
							"protected-abstract-get",

							"public-get",
							"protected-get",
							"private-get",
							"#private-get",

							"static-get",
							"instance-get",
							"abstract-get",

							"decorated-get",

							"get",

							// Setters
							"public-static-set",
							"protected-static-set",
							"private-static-set",
							"#private-static-set",

							"public-decorated-set",
							"protected-decorated-set",
							"private-decorated-set",

							"public-instance-set",
							"protected-instance-set",
							"private-instance-set",
							"#private-instance-set",

							"public-abstract-set",
							"protected-abstract-set",

							"public-set",
							"protected-set",
							"private-set",
							"#private-set",

							"static-set",
							"instance-set",
							"abstract-set",

							"decorated-set",

							"set",

							// Methods
							"public-static-method",
							"protected-static-method",
							"private-static-method",
							"#private-static-method",

							"public-decorated-method",
							"protected-decorated-method",
							"private-decorated-method",

							"public-instance-method",
							"protected-instance-method",
							"private-instance-method",
							"#private-instance-method",

							"public-abstract-method",
							"protected-abstract-method",

							"public-method",
							"protected-method",
							"private-method",
							"#private-method",

							"static-method",
							"instance-method",
							"abstract-method",

							"decorated-method",

							"method"
						]
					}
				],
				"@typescript-eslint/naming-convention": [
					"error",
					{
						"selector": "variableLike",
						"format": ["camelCase"]
					}
				],
				"@typescript-eslint/no-namespace": "off",
				"@typescript-eslint/no-explicit-any": "off",
				"@typescript-eslint/no-inferrable-types": "off",
				"@angular-eslint/no-host-metadata-property": "off",
				"@typescript-eslint/explicit-module-boundary-types": "off"
			}
		},
		// NOTE: WE ARE NOT APPLYING PRETTIER IN THIS OVERRIDE, ONLY @ANGULAR-ESLINT/TEMPLATE
		{
			"files": ["*.html"],
			"extends": ["plugin:@angular-eslint/template/recommended"],
			"rules": {}
		},
		// NOTE: WE ARE NOT APPLYING @ANGULAR-ESLINT/TEMPLATE IN THIS OVERRIDE, ONLY PRETTIER
		{
			"files": ["*.html"],
			"excludedFiles": ["*inline-template-*.component.html"],
			"extends": ["plugin:prettier/recommended"],
			"rules": {
				// NOTE: WE ARE OVERRIDING THE DEFAULT CONFIG TO ALWAYS SET THE PARSER TO ANGULAR (SEE BELOW)
				"prettier/prettier": ["error", { "parser": "angular" }]
			}
		},
		{
			"files": ["*.spec.ts"],
			"rules": {
				"max-lines-per-function": "off"
			}
		}
	]
}
